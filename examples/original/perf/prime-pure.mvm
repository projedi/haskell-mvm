// Source http://www.cs.wustl.edu/~kjg/CS101_SP97/Notes/SquareRoot/sqrt.html

double fabs(double x) {
  if (x < 0)
    return -x;
  return x;
}

int closeEnough(double a, double b) {
    return fabs(a-b) < fabs(b * 0.0001);
}

double findRoot(double w, double g) {
    double newGuess = g - (g * g - w) * g / 2;
    if (closeEnough(newGuess, g))
        return newGuess;
    else
        return findRoot(w, newGuess);
}

double sqrt(double x) {
  return findRoot(x, 1);
}

int leastFactor(int n) {
  if (n == 0) {
      return 0;  
  }
  if (n == 1) { 
      return 1;
  }
  if (n % 2 == 0) {
      return 2;
  }
  if (n % 3 == 0) {
      return 3;
  }
  if (n % 5 == 0) {
      return 5;  
  }
  double m = sqrt(n);
  int i;
  i = 7;
  while (i<=m) {
      if (n % i==0) {
          return i;
      }
      if (n%(i+4)==0) {
          return i+4;
      }
      if (n%(i+6)==0)  {
          return i+6;
      }
      if (n%(i+10)==0) {
          return i+10;
      }
      if (n%(i+12)==0) {
          return i+12;
      }
      if (n%(i+16)==0) {
          return i+16;
      }
      if (n%(i+22)==0) {
          return i+22;
      }
      if (n%(i+24)==0) {
          return i+24;
      }
      i += 30;
  }
  return n;
}

void factorize(int n)  {
    int least;
    least = n;
    print(n, " = 1");
    while (n > 1) {
        least = leastFactor(n);
        if (n % least != 0) {
            print("Bug!\n");
        }
        print(" * ", least);
        n = n / least;
    }
    print("\n");
}

int n = 10000000;
int count = 1000000;
// for (n in 10000000..(10000000+count)) {
    factorize(n);
// }
